#+TITLE: C/C++ layer
[[http://spacemacs.org][file:https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg]]
[[file:img/ccpp.jpg]]
[[file:img/cmake.png]]

* Table of Contents                                         :TOC_4_gh:noexport:
- [[#description][Description]]
- [[#changes-vs-upstream][Changes vs Upstream]]
- [[#features][Features]]
- [[#install][Install]]
  - [[#layer][Layer]]
  - [[#default-mode-for-header-files][Default mode for header files]]
  - [[#enable-clang-support][Enable Clang support]]
    - [[#clang-format][clang-format]]
    - [[#company-clang-and-flycheck][Company-clang and flycheck]]
- [[#key-bindings][Key Bindings]]
- [[#change-log][Change Log]]

* Description
This layer adds configuration for C/C++ language as well support for [[http://www.cmake.org/][CMake]]
scripts.
This is a copy of [[https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Blang/c-c%2B%2B][Spacemacs Official C/C++ Layer]], adding with some other configurations.

* Changes vs Upstream
- Add [[https://github.com/Sarcasm/irony-mode][irony-mode]].
- Add [[https://github.com/Sarcasm/company-irony][company-irony]].
- Add [[https://github.com/Sarcasm/flycheck-irony][flycheck-irony]]
- Remove =ycmd= and =company-ycmd= Support

*Note:* =irony-mode= need install =irony-server= by =M-x irony-install-server=. For more details, read irony-mode upstream documentation [[https://github.com/Sarcasm/irony-mode][irony-mode]].

* Features
- Support syntax checking via flycheck with Clang.
- Support for disassembly of code with [[https://github.com/jart/disaster][disaster]].
- Support code reformatting with [[http://clang.llvm.org/docs/ClangFormat.html][clang-format]].
- Display function or variable definition at the bottom. (when =semantic= layer
  is included)
- Display current function cursor is in at the top. See [[https://github.com/tuhdo/semantic-stickyfunc-enhance][stickyfunc-demos]] for
  demos in some programming languages. (when =semantic= layer is included)
- Support common refactoring with [[https://github.com/tuhdo/semantic-refactor][semantic-refactor]] . See [[https://github.com/tuhdo/semantic-refactor/blob/master/srefactor-demos/demos.org][srefactor-demos]] for
  demonstration of refactoring features. (when =semantic= layer is included)
- Support code navigation via cscope (when =cscope= layer is included) and gtags.
- Auto format code when save a file if current buffer have a C/C++ filename extension.

* Install
** Layer
To use this configuration layer, add it to your =~/.spacemacs=. You will need to
add =c-cpp-devel= to the existing =dotspacemacs-configuration-layers= list in this
file.

*Note:* [[https://github.com/tuhdo/semantic-refactor][semantic-refactor]] is only available for Emacs 24.4+

** Default mode for header files
By default header files are opened in =c-mode=, you can open them in =c++-mode=
by setting the variable =c-cpp-devel-default-mode-for-headers= to =c++-mode=.

#+BEGIN_SRC emacs-lisp
  (setq-default dotspacemacs-configuration-layers
    '((c-cpp-devel :variables
             c-cpp-devel-default-mode-for-headers 'c++-mode)))
#+END_SRC

*Note:* To set the variable for a given project, create a directory local
variable at the root of your project. More info on directory local variables
can be found in the [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Directory-Local-Variables.html][dir-locals]].

** Enable Clang support
To enable Clang support set the layer variable =c-cpp-devel-enable-clang-support=
to =t= in the dotfile:

#+BEGIN_SRC emacs-lisp
  (setq-default dotspacemacs-configuration-layers
    '((c-cpp-devel :variables c-cpp-devel-enable-clang-support t)))
#+END_SRC

*** clang-format
[[http://clang.llvm.org/docs/ClangFormat.html][clang-format]] allows reformatting either a selected region of code
(=clang-format-region=) or a whole buffer (=clang-format-buffer=) to make it
conform to a style defined in a =.clang-format= file. This file is either
located in the same directory as the file being edited, or in any of its parent
directories (otherwise a default style will be used).

You can add snippets similar to the following to bind clang-format to either a
particular mode or all modes in your =dotspacemacs/user-config= (within your
=~/.spacemacs=):

#+BEGIN_SRC emacs-lisp
  ;; Bind clang-format-region to C-M-tab in all modes:
  (global-set-key [C-M-tab] 'clang-format-region)
  ;; Bind clang-format-buffer to tab on the c++-mode only:
  (add-hook 'c++-mode-hook 'clang-format-bindings)
    (defun clang-format-bindings ()
      (define-key c++-mode-map [tab] 'clang-format-buffer))
#+END_SRC

*** Company-clang and flycheck
This layer adds some fancy improvements to =company-clang=.
It includes a hook to load a projects =.clang_complete= file, which is
just a text file with one clang flag per line, a format also used by
other text editor clang plugins.

Not only does this allow proper autocomplete on projects with extra
includes and flags, but there is also support for flycheck so that it
doesn't complain about missing header files.

* Key Bindings

| Key Binding | Description                                                            |
|-------------+------------------------------------------------------------------------|
| ~SPC m g a~ | open matching file (e.g. switch between .cpp and .h)                   |
| ~SPC m g A~ | open matching file in another window (e.g. switch between .cpp and .h) |
| ~SPC m D~   | disaster: disassemble c/c++ code                                       |
| ~SPC m r~   | srefactor: refactor thing at point.                                    |

*Note:*  [[https://github.com/tuhdo/semantic-refactor][semantic-refactor]]  is only available for Emacs 24.4+

* Change Log
- =2018-01-05= Remove =c-cpp-devel/init-gtags=. This function have been owned by layer gtags.
  Move =(spacemacs|diminish ggtags-mode " â’¼" " G")= to =c-cpp-devel/post-init-ggtags=
  Otherwise, an warning will occur during spacemacs startup procedure.
