#+TITLE: Spacemacs.d
[[http://spacemacs.org][file:https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg]]
* Content                                                               :TOC:
- [[#spacemacs][Spacemacs]]
- [[#layers][Layers]]
- [[#configuration][Configuration]]
  - [[#keys][Keys]]
    - [[#magit-keys][Magit Keys]]
    - [[#lsp-keys][LSP Keys]]
- [[#library-references][Library References]]
  - [[#lisp-function-list][Lisp Function List]]
  - [[#lisp-macro-list][Lisp Macro List]]
    - [[#athenaclelib-call-if][=athenacle||lib-call-if=]]
  - [[#lsp][LSP]]
    - [[#athenaclestart-lsp][athenacle|start-lsp]]
    - [[#add-new-lsp-backend][Add New LSP Backend]]
- [[#misc-files][Misc Files]]
  - [[#generate-rsync-listel][generate-rsync-list.el]]
    - [[#description][Description]]
    - [[#example-bash-code][Example Bash Code]]
- [[#license][License]]
- [[#contact][Contact]]

* Spacemacs
  =Spacemacs= is =A community-driven Emacs distribution=

* Layers
  - [[layers/athenacle-markdown][athenacle-markdown]] A fork of official [[https://github.com/syl20bnr/spacemacs/blob/master/layers/+lang/markdown/README.org][markdown]] layer. Added some other configurations.

* Configuration
** Keys
*** Magit Keys
    Prefix: ~SPC gz~
    | Key         | Description       | Available Mode | Group |
    |-------------+-------------------+----------------+-------|
    | ~SPC~ =gzp= | Magit Pull Popup  | All            | Git   |
    | ~SPC~ =gzf= | Magit Fetch Popup | All            | Git   |
    | ~SPC~ =gzP= | Magit Push Popup  | All            | Git   |

*** LSP Keys
    Prefix ~SPC mn~
    | Key         | Description                | Available Mode                       | Group |
    |-------------+----------------------------+--------------------------------------+-------|
    | ~SPC~ =mnd= | LSP Find Definitions       | Go/Javascript/Python/Java/C/C++/ObjC | LSP   |
    | ~SPC~ =mnr= | LSP File References        | Go/Javascript/Python/Java/C/C++/ObjC | LSP   |
    | ~SPC~ =mns= | LSP Find Workspace Symbols | Go/Javascript/Python/Java/C/C++/ObjC | LSP   |
    | ~SPC~ =mnc= | Clear Buffer Delimiters    | Go/Javascript/Python/Java/C/C++/ObjC | LSP   |


* Library References

** Lisp Function List
** Lisp Macro List
*** =athenacle||lib-call-if=
    - Call =func= when =pred= is not nil, with arguments =object= and =others=
    - ~(defmacro athenacle||lib-call-if pred func &optional object others)~
      - pred =function=
      - func =function=
      - object =emacs object= /optional/
      - others =list= /optional/
    - Sample
      #+BEGIN_SRC emacs-lisp
        ;; definition
        (defmacro athenacle||lib-call-if (pred func &optional object others)
          "Test function PRED, if it eval as not nil, apply OBJECT to FUNC. When FUNC is nil, set it to `message'."
          `(when (funcall ,pred)
             (apply (quote ,func) (cons ,object ,others))))

        (athenacle|start-lsp go-mode :start go-go-go-go-enable)
      #+END_SRC
      ;; sample
      (athenacle||lib-call-if (lambda () t) message "sample %s message" '("usage"))

      ;; expand
      (macro-expand '(athenacle||lib-call-if (lambda () t) message "sample %s message" '("usage")))
      ;; ==>
      ;; (if
      ;;     (funcall
      ;;      (lambda nil t))
      ;;     (progn
      ;;       (apply 'message
      ;;               (cons "sample %s message"
      ;;                     '("usage")))))
      #+END_SRC
    - Related Macros
      - =athenacle||lib-call-if-debug-on-error=
      - =athenacle||lib-message-if-debug-on-error=
** LSP
*** athenacle|start-lsp
    =athenacle|start-lsp= is a /macro/ defined in [[lisp/init-lsp.el][init-lsp.el]]
    #+BEGIN_SRC elisp
      (cl-defmacro athenacle|start-lsp(mode &key (start nil) (before nil) (after nil))
        "Main start-lsp macro
      MODE: enable LSP for major mode
      START: LSP starting function. If it is `nil', a default function such as `lsp-go-enable' is called.
      BEFORE: function that should be called before `START'
      AFTER: function called after `START'
      ."
        (message "enable start-lsp: mode: %s, start: %s, before: %s, after: %s" mode start before after)
        (setq before (if before before #'(lambda())))
        (setq after (if after after #'(lambda())))
        (setq mode-hook-name (intern (format "%s-hook" mode)))
        (setq start-func-name (if start start (intern (format "lsp-%s-enable" (car (split-string (symbol-name mode) "-"))))))
        `(add-hook (quote ,mode-hook-name)
                   (lambda() (progn
                               (,before)
                               (with-eval-after-load 'lsp-mode
                                 (require 'lsp-flycheck))
                               (flycheck-mode t)
                               (when (athenacle|spacemacs-enabled)
                                 (spacemacs|add-company-backends :modes ,mode :backends company-lsp)
                                 (spacemacs|diminish lsp-mode "  Ⓛ " " L ")
                                 (spacemacs/declare-prefix-for-mode (quote ,mode) "mn" "lsp tools")
                                 (spacemacs/set-leader-keys-for-major-mode  (quote ,mode)
                                   "nd" 'lsp-ui-peek-find-definitions
                                   "nr" 'lsp-ui-peek-find-references
                                   "ns" 'lsp-ui-peek-find-workspace-symbol
                                   "nc" 'athenacle-lsp/clear-buffer-delimiters))
                               (,start-func-name)
                               (,after)))))
    #+END_SRC
*** Add New LSP Backend
    All have to do is =require= lsp-package and then call =athenacle|start-lsp=. The defualt start funtion is generated by the macro
    #+BEGIN_SRC elisp
      ;; method 1
      (require 'go-lsp)
      (athenacle|start-lsp go-mode) ;; this will call `lsp-go-enable'

      ;; method 2
      (require 'lsp-mode)
      (lsp-define-stdio-client
       go-go-go-go   ;; funciont name will be `go-go-go-go-enable'
       "go"
       (lsp-make-traverser #'(lambda (dir)
                               (directory-files dir nil "main.go")))
       `(,athenacle|go-server, "-mode=stdio")
       :initialize
       (lambda (client)
         (lsp-provide-marked-string-renderer client "go" (athenacle|make-renderer "go")))
       :ignore-regexps
       '("^langserver-go: reading on stdin, writing on stdout$"))

      (athenacle|start-lsp go-mode :start go-go-go-go-enable)
    #+END_SRC

* Misc Files
** [[generate-rsync-list.el][generate-rsync-list.el]]
*** Description
    Calculate Layers List according to =dotspacemacs-configuration-layers=. It is used for sync layer directory to tmpfs.
*** Example Bash Code
    #+BEGIN_SRC sh
      #!/bin/bash

      emacs_path="$HOME"/.config/.emacs.d
      emacs_generate_rsync_list_path="$HOME"/.spacemacs.d/generate-rsync-list.el
      cd "$emacs_path" || exit
      include_path="$(mktemp)"
      echo "$emacs_path"
      emacs -Q --script "$emacs_generate_rsync_list_path" "$emacs_path" "$include_path"
      cat >> "$include_path" << EOF
      init.el
      elpa/
      core/
      .cache/
      private/
      .lock
      EOF
      rsync -ar "$emacs_path" /tmp/emacs --files-from="$include_path" --exclude "*.org"
      rm "$include_path"
    #+END_SRC

* License
  [[https://www.gnu.org/licenses/gpl-3.0.en.html][GPLv3]]

* Contact
  [[mailto:zjjhwxc@gmail.com][zjjhwxc(at)gmail.com]]
